"""
PSIT-CLOUD_MALWARE_SCANNER
Last Audit : 1042 - 17122014
Last Mod : 1043 - 17122014
Auditor : Libertia Yang and Harit Llby
"""
from Tkinter import *
from tkFileDialog import *
from threading import Thread
import ttk
import json as simplejson
import postfile
import urllib
import urllib2
import tkMessageBox
import time
root = Tk()
root.wm_title("PSIT: Cloud Malware Scanner")
class App:
    def __init__(self, master):
        master.minsize(width=540, height=450)
        mlabel = Label(root, text="Pre-Scan Files"\
            , font = ("CordiaUPC", 14)).place(x= 360, y = 75)
        slabel = Label(root, text="Scanned Files"\
            , font = ("CordiaUPC", 14)).place(x= 100, y = 5)
        global uplabel
        global reslabel
        global anv_list
        anv_list = ['nProtect', 'CAT-QuickHeal', 'McAfee', 'TheHacker', 'Bkav'\
        , 'MicroWorld-eScan', 'CMC', 'CAT-QuickHeal', 'Malwarebytes', 'Zillya'\
        , 'SUPERAntiSpyware', 'K7GW', 'K7AntiVirus', 'NANO-Antivirus', \
        'F-Prot', 'Symantec', 'Norman', 'TotalDefense', 'Avast', \
        'TrendMicro-HouseCall', 'ClamAV', 'Kaspersky', 'BitDefender', \
		'Agnitum', 'SUPERAntiSpyware', 'ByteHero', 'Ad-Aware', \
		'Comodo', 'F-Secure', 'DrWeb', 'Zillya', 'TrendMicro', \
		'McAfee-GW-Edition', 'Sophos', 'Cyren', 'Jiangmin', \
		'Avira', 'Antiy-AVL', 'Kingsoft', 'Microsoft', 'ViRobot', \
		'GData', 'AhnLab-V3', 'McAfee', 'AVware', 'VBA32', \
		'Baidu-International', 'Zoner', 'ESET-NOD32', 'Rising', 'Ikarus', \
		'Fortinet', 'AVG', 'Panda', 'Qihoo-360']# We're done here
        uplabel = Text(width = 30, height = 18, font = ("Corbel",10), bg='#4d5355', fg = 'white')
        uplabel.place(x = 300, y = 100)
        reslabel = Text(width = 35, height = 25, font = ("Corbel",10), \
            bg = '#4d5355', fg = 'white')
        reslabel.place(x = 25, y = 30)
        header_pic = PhotoImage(file = "psitlabel1.gif")
        header = Label(image = header_pic)
        header.image = header_pic 
        header.place(x = 300, y = 27)
        uplabel.insert(1.0, " Please choose any file to scan")
        uplabel.config(state="disabled")
        reslabel.insert(1.0, " Scaning process : Idle")
        reslabel.config(state="disabled")
        self.choose_but = Button(text = "Choose File", command = self.choose_form)
        self.choose_but.place(x=320, y=385)
        self.upload_but = Button(text = "Upload File", command = self.upload_form)
        self.upload_but.place(x=420, y=385)
        frame = Frame(master)
        frame.pack()
    def choose_form(self):
        """Set a parameter of files to upload"""
        global ufile
        ufile = askopenfilenames(parent = root, title = 'Choose any file')
        ufile = root.tk.splitlist(ufile)
        uplabel.config(state = "normal")
        uplabel.delete(1.0, END)
        scan_num = ' File(s) to scan : %d\n' % len(ufile) + \
        ('-' * 112)
        uplabel.insert(END, ' \n '.join([scan_num] + list(ufile)))
        uplabel.config(state = "disabled")
        reslabel.config(state = "normal")
        reslabel.delete(1.0, END)
        reslabel.config(fg = 'white')
        reslabel.insert(1.0, " Scaning process : Idle")
        reslabel.config(state="disabled")
        global myreport
        myreport = []
        global temp2
        temp2 = {}
        global qfile
        qfile = ufile
        global cnt
        cnt = 0
    def upload_form(self):
        """Uploading process, files to VirusTotal's server"""
        tkMessageBox.showinfo(" Uploading", "Uploading file(s)\n\
        This may take a few minute.")
        print 'Started: %s' % time.ctime(time.time())
        for i in xrange(len(qfile)):
            t = Thread(target = mal_sender, args = (qfile[i], ))
            t.start()
        global cnt
        while 1:
            if cnt == len(qfile):
                break
        tkMessageBox.showinfo(" Scanning", "Scanning Completed...")
        reslabel.config(state = "normal")
        reslabel.delete(1.0, END)
        reslabel.insert(END, ' Scanning process : Completed\n')
        reslabel.insert(END, ' Infected file(s) : %d out of %d\n\n' %\
            (len(myreport), len(ufile)))
        if myreport == []:
            reslabel.config(fg = 'green')
            reslabel.insert(END, ' None')
        else:
            reslabel.config(fg = 'red')
            reslabel.insert(END, '\n'.join(myreport))
        reslabel.config(state = 'disabled')
def mal_sender(sfile):
    """send specified file to VirusTotal's server"""
    global myapi
    myapi = "6a8bee749c3ab9ac9258125c8c0ff9a62d36ad2a230a6207d746519c7411c981"
    host = "www.virustotal.com"
    selector = "https://www.virustotal.com/vtapi/v2/file/scan"
    fields = [("apikey", "%s" % myapi)]
    file_to_send = open(sfile, "rb").read()
    files = [("file", sfile, file_to_send)]
    json = postfile.post_multipart(host, selector, fields, files)
    sha1_hash = ((json[json.find('sha1'):json.find('sha1') + \
        49]).lstrip('sha1\": \"')).rstrip('\"')
    print 'UPLOADED: %s : %s' % (sfile, time.ctime(time.time()))
    print 'SCANNING: %s : %s' % (sfile, time.ctime(time.time()))
    mal_recv_report(sfile, sha1_hash)
    global cnt
    cnt += 1
def mal_recv_report(filename, sha1_hash_rp):
    """Fetch report from VirusTotal's server"""
    url = "https://www.virustotal.com/vtapi/v2/file/report"
    parameters = {"resource": "%s" % sha1_hash_rp, "apikey": "%s" % myapi}
    data = urllib.urlencode(parameters)
    req = urllib2.Request(url, data)
    response = urllib2.urlopen(req)
    json_rp = response.read()
    print json_rp
    if json_rp.count('detected') == 0:#done
        mal_recv_report(filename, sha1_hash_rp)
    print 'SCAN COMPLETED : %s at %s' % (filename, time.ctime(time.time()))
    response_dict = simplejson.loads(json_rp)
    temp = []
    for anv in anv_list:
        chk_anv = response_dict.get("scans", {}).get(anv, {}).get("result")
        if chk_anv != None and chk_anv not in temp:
            temp.append(str(chk_anv))
    if temp != []:
        pre_up = ' File : %s\n as %s' % (str(filename), (str(temp).rstrip(']')).lstrip('['))
        myreport.append(pre_up)
app = App(root)
root.mainloop()